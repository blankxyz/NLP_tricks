"""
模拟条款句子的风险检查
"""
# 已知风险句
text_g = '甲方根据资金落实情况，保证在设备进厂后40个工作日内支付该项进度款'
# 待检查风险句（编的）
text_1 = '在合同签定后10个工作日内，买方向卖方支付总价款'
text_2 = '甲方一次性支付货物全款，并在货到验收后10日内付清'
text_3 = '甲方按照资金情况，确保在设备进厂后40天内支付货款'

# 实体列表
entity = ['甲方', '进度款', '总价款', '资金', '工作日', '货物', '全款']
# 相关动词列表
behaviors = ['支付', '签定', '验收', '付清', '到位']

# 以下三组句子表示都是通过句法分析后得到的结果
# 第一层关系：句子的核心主谓宾（有必要使用实体及相关动词词表对核心主谓宾进行筛查）
# 判断方法：实体识别，同义词查找替换
text_g_core = {'sub': ['甲方'], 'root': ['保证'], 'obj': []}  # 【支付该项进度款】做宾语
text_1_core = {'sub': ['买方'], 'root': ['支付'], 'obj': ['总价款']}
text_2_core = {'sub': ['甲方'], 'root': ['支付', '付清'], 'obj': ['全款']}
text_3_core = {'sub': ['甲方'], 'root': ['确保'], 'obj': []}  # 【支付货款】做宾语
# 第一层对比结果
compare_1_g_core = [1, 0, 0]
compare_2_g_core = [1, 0, 0]
compare_3_g_core = [1, 1, 1]

# 第二层关系：对比句是否包含相同的语法成分（将具体成分顺序固定下来，1.状语，2.修饰主语定语，3.修饰谓语状语，等）
# 判断方法：同位为1得1，其他情况为0
text_g_comp = {'comp1': 0, 'comp2': 1, 'comp3': 1, 'comp4': 0, 'comp5': 0, 'comp6': 1}
text_1_comp = {'comp1': 1, 'comp2': 0, 'comp3': 0, 'comp4': 1, 'comp5': 0, 'comp6': 0}
text_2_comp = {'comp1': 0, 'comp2': 0, 'comp3': 1, 'comp4': 0, 'comp5': 1, 'comp6': 1}
text_3_comp = {'comp1': 0, 'comp2': 1, 'comp3': 1, 'comp4': 0, 'comp5': 0, 'comp6': 1}
# 第二层对比结果
compare_1_g_comp = [0, 0, 0, 0, 0, 0]
compare_2_g_comp = [0, 0, 0, 0, 0, 0]
compare_3_g_comp = [0, 1, 1, 0, 0, 1]

# 第三层关系：对比句中对应成分的具体信息
# 判断方法：实体识别，同义词查找替换，只关注成分内【实体】和【相关动词】【介词】是否相似，参考实体动词，相关动词和介词词表
text_g_detail = {'comp1': '', 'comp2': '根据资金落实情况', 'comp3': '在设备进厂后40个工作日内', 'comp4': '', 'comp5': '', 'comp6': '支付该项进度款'}
text_1_detail = {'comp1': '在合同签定后10个工作日内', 'comp2': '', 'comp3': '', 'comp4': '向乙方', 'comp5': '', 'comp6': ''}
text_2_detail = {'comp1': '', 'comp2': '', 'comp3': '一次性', 'comp4': '', 'comp5': '货物', 'comp6': '在货到验收后10日内'}
text_3_detail = {'comp1': '', 'comp2': '按照资金情况', 'comp3': '在设备进厂后40天内', 'comp4': '', 'comp5': '', 'comp6': '支付货款'}
# 由于 text_1 和 text_2 与 text_g 没有存在的，同一位置的成分，所以只看 text_3 和 text_g 的关系
# 首先判断comp2
comp2_g = '根据资金落实情况'
comp2_3 = '按照资金情况'

# step1，对成分字符串进行分词（保留最初的分词结果，直接检查token是否存在于成分字符串中）
# step2，针对每一个成分，找到所有存在于词表当中的实体，相关动词和介词，做成字典格式
example_g_comp = {'实体': '', '相关动词': '', '相关介词': ''}
example_3_comp = {'实体': '', '相关动词': '', '相关介词': ''}
# step3，从两个方面对比两个字典中的value，（1）是否都有value，（2）value是否可替换
# 第三层关系抽取，可参考 component_analysis.py 代码

# 三层关系全部抽取完成后，可以考虑从F1值的角度来计算待检查句子与已知风险句的相似度
# 第一层结果，3维向量
# 第二层结果，一共有n个成分，有n维向量
# 第三层结果，每个成分有3维向量，共有n个向量

